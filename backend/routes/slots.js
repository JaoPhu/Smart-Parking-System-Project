const express = require('express');
const router = express.Router();
const Slot = require('../models/Slot');
const { requireAdmin } = require('../middleware/auth');

// GET: ‡∏î‡∏π‡∏ä‡πà‡∏≠‡∏á‡∏à‡∏≠‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
router.get('/', async (req, res) => {
    try {
        const slots = await Slot.find().sort({ slotNumber: 1 });
        res.json(slots);
    } catch (err) {
        res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î' });
    }
});

// POST: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ä‡πà‡∏≠‡∏á‡∏à‡∏≠‡∏î‡πÉ‡∏´‡∏°‡πà
router.post('/', async (req, res) => {
    try {
        const { slotNumber } = req.body;
        const existing = await Slot.findOne({ slotNumber });
        if (existing) return res.status(400).json({ error: 'slot ‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß' });
        const newSlot = new Slot({ slotNumber });
        await newSlot.save();
        res.status(201).json(newSlot);
    } catch (err) {
        res.status(500).json({ error: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ä‡πà‡∏≠‡∏á‡∏à‡∏≠‡∏î‡πÑ‡∏î‡πâ' });
    }
});

// PUT: ‡∏à‡∏≠‡∏á / ‡πÄ‡∏Ç‡πâ‡∏≤‡∏à‡∏≠‡∏î / ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ä‡πà‡∏≠‡∏á
router.put('/:slotNumber', async (req, res) => {
    try {
        const { slotNumber } = req.params;
        const { action } = req.body;
        const slot = await Slot.findOne({ slotNumber: parseInt(slotNumber) });
        if (!slot) return res.status(404).json({ error: '‡πÑ‡∏°‡πà‡∏û‡∏ö slot ‡∏ô‡∏µ‡πâ' });

        const now = new Date();

        if (action === 'reserve') {
            slot.isBooked = true;
            slot.isOccupied = false;
            slot.bookedAt = now;
            slot.bookedBy = req.body.username || "unknown";
            slot.parkedAt = null;
            slot.leftAt = null;
            await slot.save();
            return res.json(slot);
        }

        if (action === 'park') {
            if (!slot.isBooked) {
                return res.status(400).json({ error: '‡∏ä‡πà‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≠‡∏á' });
            }

            const diffMin = (now - slot.bookedAt) / (1000 * 60);
            if (diffMin > 15) {
                return res.status(400).json({ error: '‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏à‡∏≠‡∏á 15 ‡∏ô‡∏≤‡∏ó‡∏µ' });
            }

            slot.isOccupied = true;
            slot.parkedAt = now;
            slot.parkedBy = req.body.username || slot.bookedBy || "unknown";
            await slot.save();
            return res.json(slot);
        }

        if (action === 'leave') {
            if (!slot.parkedAt) {
                return res.status(400).json({ error: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏¥‡∏î‡∏Ñ‡πà‡∏≤‡∏à‡∏≠‡∏î‡πÑ‡∏î‡πâ: ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤ (parkedAt)' });
            }

            const diffSeconds = Math.floor((now - slot.parkedAt) / 1000);
            const fee = diffSeconds; // ‡∏Ñ‡∏¥‡∏î‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡∏•‡∏∞ 1 ‡∏ö‡∏≤‡∏ó

            slot.leftAt = now;
            slot.isOccupied = false;
            slot.isBooked = false;

            // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ã‡∏ï‡πÄ‡∏ß‡∏•‡∏≤‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≠‡∏î
            slot.parkedAt = null;
            slot.bookedAt = null;

            await slot.save();

            return res.json({
                message: `‡∏£‡∏ñ‡∏≠‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß ‡∏Ñ‡πà‡∏≤‡∏à‡∏≠‡∏î ${fee} ‡∏ö‡∏≤‡∏ó (‡∏à‡∏≠‡∏î ${diffSeconds} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)`,
                slot
            });
        }


        return res.status(400).json({ error: 'action ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' });
    } catch (err) {
        console.error('‚ùå PUT Error:', err);
        res.status(500).json({ error: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ' });
    }
});

// POST: ‡∏£‡∏µ‡πÄ‡∏ã‡∏ï‡∏ä‡πà‡∏≠‡∏á‡∏à‡∏≠‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
router.post('/reset', requireAdmin, async (req, res) => {
    try {
        await Slot.updateMany({}, {
            isBooked: false,
            isOccupied: false,
            bookedAt: null,
            parkedAt: null,
            leftAt: null
        });
        console.log('üßº [RESET] ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ä‡πà‡∏≠‡∏á‡∏à‡∏≠‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÅ‡∏•‡πâ‡∏ß');
        res.json({ message: '‡∏£‡∏µ‡πÄ‡∏ã‡∏ï‡∏ä‡πà‡∏≠‡∏á‡∏à‡∏≠‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß ‚úÖ' });
    } catch (err) {
        console.error('‚ùå Reset Error:', err);
        res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ã‡∏ï‡∏ä‡πà‡∏≠‡∏á‡∏à‡∏≠‡∏î' });
    }
});

module.exports = router;