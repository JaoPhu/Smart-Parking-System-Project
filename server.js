const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');
const dotenv = require('dotenv');

// Routes
const authRoutes = require('./backend/routes/auth');
const slotsRoutes = require('./backend/routes/slots');
const historyRoutes = require('./backend/routes/history');

// ‡πÇ‡∏´‡∏•‡∏î .env
dotenv.config();

// ‡∏™‡∏£‡πâ‡∏≤‡∏á Express app
const app = express();

// Middleware
app.use(cors());
app.use(express.json());

// ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MongoDB
mongoose.connect(process.env.MONGODB_URI, {
  useNewUrlParser: true,
  useUnifiedTopology: true
})
.then(() => {
  console.log('‚úÖ MongoDB connected');

  // ‡πÄ‡∏£‡∏¥‡πà‡∏° server ‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏° MongoDB ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
  const PORT = process.env.PORT || 5000;
  app.listen(PORT, () => {
    console.log(`üöÄ Server running on port ${PORT}`);
  });
})
.catch((err) => {
  console.error('‚ùå MongoDB connection error:', err);
});

// ‡πÉ‡∏ä‡πâ routes
app.use('/api/auth', authRoutes);
app.use('/api/slots', slotsRoutes);
app.use('/api/history', historyRoutes);

// Cron Job: ‡∏•‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ñ‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏ô 15 ‡∏ô‡∏≤‡∏ó‡∏µ (‡∏ó‡∏∏‡∏Å 1 ‡∏ô‡∏≤‡∏ó‡∏µ)
const Slot = require('./backend/models/Slot');
const FIFTEEN_MIN = 15 * 60 * 1000;

setInterval(async () => {
  const expiredTime = new Date(Date.now() - FIFTEEN_MIN);
  const result = await Slot.updateMany(
    {
      isBooked: true,
      isOccupied: false,
      bookedAt: { $lt: expiredTime }
    },
    {
      isBooked: false,
      bookedAt: null,
      bookedBy: null
    }
  );
  if (result.modifiedCount > 0) {
    console.log(`‚è∞ ‡∏•‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏: ${result.modifiedCount} ‡∏ä‡πà‡∏≠‡∏á`);
  }
}, 60 * 1000);
